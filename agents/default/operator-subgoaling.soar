
###
###		7.4	Operator Subgoaling (modified extensively by JEL/mvp 07-Nov-93)
#######################################################################################
###  RESTRICTIONS ON USE:
###
###     1. The problem space used for operator implmentation can not be exactly
###     the same problem space used for operator subgoaling (or the original
###     task problem space).  It can be a duplicate, but can not have the same
###     identifier.  This is because operator subgoaling is signalled by the
###     selection of the task space as the problem space in the operator
###     no-change subgoal.
###
###     2. For operator subgoaling and operator implementation to work
###     together, there must be a production that tests when the preconditions
###     of the operator have been achieved (operator subgoaling is successful)
###     and whose action is to reconsider the problem space.  This is necessary
###     so that the switch can be made from the operator subgoaling problem
###     space (the original task space) and the operator implementation problem
###     space.
###
###     3. All operators must be augmented with ^achieved <x> when they have
###     successfully applied.  This helps avoid problems where chunks learned
###     through operator subgoaling, can undo operator actions, and vice
###     versa.
###   
###     4. Operators must apply by changing existing structures on the state,
###     not by creating new ones, or destroying existing ones.
###
#####################################################################################

#####################################################################################
###  OVERVIEW
###
### For look-ahead searches, always select the operator that subgoaling on
### after another operator has applied.  If it then sucessfully applied, the
### look-ahead search was a success.
###
#####################################################################################


### make the super-problem space the default
###         when there is a no-change for the operator
###   make is worst so operator implementation will win out

sp {default*generic*opsub*propose*space*generic
   :default
   (state <s> ^impasse no-change ^attribute operator 
	      ^superstate <ss>)
   (state <ss> ^problem-space <p2>)
   -->
   (<s> ^problem-space <p2>)}

###if the superproblem-space is selected as the
###         current problem space then operator subgoaling
###         is being used so select the superstate -
###         the super-operator becomes the desired)
###
###  The name gets a parallel preference because the state
###   above (which is being copied down to this state) may
###   also have a name.

sp {default*generic*opsub*elaborate*state*name*operator-subgoal
   :default
   (state <s> ^problem-space <p> 
	      ^impasse no-change ^attribute operator ^superstate <ss>)
   (state <ss> ^problem-space <p>)
   -->
   (<s> ^name operator-subgoal)}

sp {default*generic*opsub*elaborate*state*desired
   :default
   (state <s> ^problem-space <p> ^name operator-subgoal ^superstate <ss>)
   (state <ss> ^operator <o>)
   -->
   (<s> ^desired <o>)}

sp {default*generic*opsub*copy*superstate
   :default
   (state <s> ^name operator-subgoal ^superstate <ss>)
   (<ss> ^ { <att> <> problem-space <> impasse <> object <> name
                   <> superstate <> attribute <> operator <> desired }
	   <value>)
   -->
   (<s> ^<att> <value>)}

### The following is commented out; it would provide for keeping track
###  of all levels of operator subgoaling, not just the most recent. 
### Pass down all super operator subgoals as well.
#
# sp {default*generic*opsub*goal*elaborate*all-desireds
#   :default
#   (state <s> ^problem-space <p> 
#	      ^impasse no-change ^attribute operator ^superstate <ss>)
#   (state <ss> ^problem-space <p> ^desired <o>)
#   -->
#   (state <s> ^desired <o>)}
#
#
###don't select the operator for the operator that we are 
###        subgoaling on.  

sp {default*generic*select*reject-desired
   :default
   (state <s> ^name operator-subgoal ^problem-space <p> ^desired <o>)
   -->
   (<s> ^operator <o> -)}

##if there is an evaluation subgoal within
###         an operator subgoal and the operator being
###         subgoaled on is applied - success

sp {default*generic*opsub*detect*state*success
   :default
   (state <g-eval> ^problem-space <p> ^desired <o> ^applied <o>)
   (<o> ^achieved <ss>)
   -->
   (<ss> ^success <o>)}

sp {opsub*select-operator*subgoaling
   :default
   (state <s1> ^name implement-evaluate-object ^problem-space <p>
	       ^operator <> <o> ^desired <o>)
   (<o> ^name)
   -->
   (<s1> ^operator <o> !)}
 
sp {default*generic*opsub*failure*no-operator
   :default
   (state <s> ^superstate <ss> ^impasse no-change ^attribute state ^quiescence t)
   (<ss> ^name operator-subgoal ^desired <d>)
   -->
   (<ss> ^failure <d>)}
 
sp {default*generic*evaluation*failure*no-operator
   :default
   (state <s> ^superstate <ss> ^impasse no-change ^name operator-subgoal
	      ^attribute operator ^desired <d> ^quiescence t
	      ^failure <d>)
   (<ss> ^operator <so> ^desired <sd>)
   -->
   (<ss> ^failure <sd>)}
 
   
sp {default*generic*opsub*avoid*duplicate-operator
   :default
   (state <s> ^impasse no-change ^name operator-subgoal
	      ^attribute operator ^operator <o> + ^super-desired <sd>)
   (<o> ^name <name>)
   (<sd> ^name <name>)
   -->
   (<s> ^operator <o> -)}
 
#sp {default*generic*opsub*operator-subgoals
#   :default
#   (state <s> ^name implement-evaluate-object ^problem-space <p>
#	      ^operator <o> ^desired <o>)
#   (state <ss> ^name operator-subgoal ^superstate <s>)
#   -->
#   (<s> ^operator <o> @)}
     
## These maintain the super-desireds
 
sp {default*generic*opsub*subgoal-on-all-desired-super-desireds
   :default
   (state <s> ^problem-space <p>
	      ^impasse no-change ^attribute operator ^superstate <ss>)
   (<ss> ^problem-space <p> ^desired <o>)
   -->
   (<s> ^super-desired <o> <o> &)}
 
sp {default*generic*opsub*subgoal-on-all-super-desireds
   :default
   (state <s> ^problem-space <p>
	      ^impasse no-change ^attribute operator ^superstate <ss>)
   (<ss> ^problem-space <p> ^super-desired <o>)
   -->
   (<s> ^super-desired <o> <o> &)}
 
sp {default*apply*evaluate*augment*evaluation-operator-super-desired
   :default
   (state <s> ^operator <o> ^superstate <ss>)
   (<ss> ^super-desired <d>)
   (<o> ^evaluation <e> ^type evaluation)
   -->
   (<o> ^super-desired <d> <d> &)}
 
sp {default*elaborate*state*eval*super-desired
   :default
   (state <s> ^impasse no-change ^attribute operator ^superstate <ss>)
   (<ss> ^operator <so>)
   (<so> ^type evaluation ^super-desired <d>)
   -->
   (<s> ^super-desired <d> <d> &)}




