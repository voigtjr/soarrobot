sp {selection*learn
   :default
   (state <s> ^name selection)
-->
   (force-learn <s>)}

sp {evaluate-operator*elaborate*forward*visited
   (state <s> ^name selection
              ^superstate.superstate.operator.evaluation.visited <ewp>
              ^operator <op>)
   (<ewp> ^id <id>)
-->
   (write (crlf) |Visited: | <id>)
   (<op> ^visited <ewp>)
}

sp {evaluate-operator*elaborate*visited*current-location
   (state <s> ^name selection
              ^superstate.top-state.current-location <wp>
              ^evaluation <e>)
-->
   (<e> ^visited <wp>)
}
#sp {selection*elaborate*estimated-cost
#   :default
#   (state <s> ^name selection
#              ^evaluation <e>
#              ^superstate.desired <dloc>)
#   (<e> ^current-location <cloc>)
#   (<cloc> ^x <cx> ^y <cy> ^id <cid>)
#   (<dloc> ^x <dx> ^y <dy> ^id <did>)
#-->
#   (write (crlf) |*********************************|)
#   (write (crlf) |Current waypoint: | <cid> | | <cx> | | <cy>)
#   (write (crlf) |Desired waypoint: | <did> | | <dx> | | <dy>)
#   (write (crlf) |Estimated cost:   | (compute-range <cx> <cy> <dx> <dy>))
#   (<e> ^estimated-cost (compute-range <cx> <cy> <dx> <dy>))
#}
#
sp {selection*elaborate*evaluation*total-estimated-cost
   :default
   (state <s> ^name selection
              ^evaluation <e>
              ^superstate.desired.location <dloc>)
   (<e> ^current-location <cloc>
        ^path-cost <pc>)
   (<cloc> ^x <cx> ^y <cy> ^id <cid>)
   (<dloc> ^x <dx> ^y <dy> ^id <did>)
-->
   (write (crlf) |++++++++++++++++++++++++++++++|)
   (write (crlf) |current x | <cx> | y | <cy>)
   (write (crlf) |desired x | <dx> | y | <dy>)
   (write (crlf) |range:    | (compute-range <cx> <cy> <dx> <dy>))
   (write (crlf) |Total Estmated Cost: | (+  (compute-range <cx> <cy> <dx> <dy>) <pc>))
   (<e> ^total-estimated-cost (+  (compute-range <cx> <cy> <dx> <dy>) <pc>)
        ^estimated-cost (compute-range <cx> <cy> <dx> <dy>)  )
}

sp {selection*elaborate*evaluation*final-cost
   :default
   (state <s> ^name selection
              ^evaluation <e>)
   (<e> ^estimated-cost 0
        ^path-cost <pc>)
-->
   (write (crlf) |Final Cost: | <pc>)
   (<e> ^final-cost <pc>
        ^value true)
}

sp {selection*elaborate*superstate*preferences*final-cost*equal
   :default
   (state <s> ^name selection
              ^evaluation <e1> { <e2> <> <e1> }
              ^superstate <ss>)
   (<e1> ^superoperator <so1>
         ^final-cost <fc>)
   (<e2> ^superoperator <so2>
         ^final-cost <fc>)
-->
   (<ss> ^operator <so1> = <so2>)}

# probably redundant with following rule
sp {selection*elaborate*superstate*preferences*final-cost*better
   :default
   (state <s> ^name selection
              ^evaluation <e1> { <e2> <> <e1> }
              ^superstate <ss>)
   (<e1> ^superoperator <so1>
         ^final-cost <fc>)
   (<e2> ^superoperator <so2>
         ^final-cost > <fc>)
-->
   (<ss> ^operator <so1> > <so2>)}


sp {selection*elaborate*superstate*preferences*final-cost*better*estimated
   :default
   (state <s> ^name selection
              ^evaluation <e1> { <e2> <> <e1> }
              ^superstate <ss>)
   (<e1> ^superoperator <so1>
         ^final-cost <fc>)
   (<e2> ^superoperator <so2>
         ^total-estimated-cost > <fc>)
-->
   (<ss> ^operator <so1> > <so2>)}