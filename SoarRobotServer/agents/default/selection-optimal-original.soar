## -*- Mode: sde -*-
##
############################# -*- Mode: Soar -*- #############################
## 
## File            : default/selection.soar
## Author          : John Laird
## Created on      : Mon Feb 27 16:15:34 1989  
## Last Modified On: 26 October, 2003
## 
## Contents:     Default productions for selection problem space for Soar 8.5
##
######################################################################
### Change made for Soar 8.5
###
### Significant Changes made to Convert to Soar 8.2
###    1. evaluate-object -> evaluate-operator
###    2. Removed other types of evaulate-
###    3. Change from problem-space.name selection -> name selection
###    4. Simplified so only handles vanillia evaluate-operator
###    5. Don't copy down problem space, just copy down name and
###       assume problem space will be regenerated in subgoal based on name
###    6. Added some documentation
###    

###

###    State structure:
###    (state <s> ^evaluation <e>
###               ^not-all-operators-evaulated true
###               ^operator-selection not-indifferent
###               ^found-value true)
###    (<e> ^numeric-value  novalue
###         ^symbolic-value novalue/success/failure
###         ^value true
###         ^operator (identifier of operator being evaluated)
###         ^desired <d>
###
###
###    (<o> ^name evaluate-operator
###         ^operator <so>
###         ^evaluation <e>  ;# same as on state
###         ^superproblem-space
###         ^superstate 



### Use selection for all choice multiple, impasses 

sp {selection*elaborate*name*selection
   :default
   (state <s> ^choices multiple)
   -->
   (<s> ^name selection)}      



###
###      7.3.1 The evaluate-operator operator
###

### Create evaluate operator in selection problem space.

sp {selection*propose*evaluate-operator
   :default
   (state <s> ^name selection
              ^item <i>)
 -{(state <s> ^evaluation <e>)
   (<e> ^superoperator <i>
        ^value true)}
   -->
   (<s> ^operator <o> +)
   (<o> ^name evaluate-operator 
        ^superoperator <i>)}


### Make them indifferent if not ^operator-selection not-indifferent.

sp {selection*select*evaluate-operator*indifferent
   :default
   (state <s> ^name selection
            - ^operator-selection not-indifferent
              ^operator <o> +)
   (<o> ^name evaluate-operator)
   -->
   (<s> ^operator <o> =)}

### Create evaluation once the eval operator is selected.
 
sp {selection*apply*state*evaluation
   :default
   (state <s> ^name selection
              ^operator <o>)
   (<o> ^name evaluate-operator
        ^superoperator <ob>)
   -->
   (<s> ^evaluation <e>) 
   (<e> ^superoperator <ob>)}

sp {selection*elaborate*evaluate-operator*evaluation
   :default
   (state <s> ^name selection
              ^operator <o>
      ^evaluation <e>)
   (<o> ^name evaluate-operator
        ^superoperator <ob>)
   (<e> ^superoperator <ob>)
   -->
   (<o> ^evaluation <e>)}

sp {selection*elaborate*evaluate-operator*superproblem-space
   :default
   (state <s> ^name selection
              ^operator <o>
              ^superstate.problem-space <p2>)
   (<o> ^name evaluate-operator)
   -->
   (<o> ^superproblem-space <p2>)}

sp {selection*elaborate*evaluate-operator*superstate
   :default
   (state <s> ^name selection
              ^operator <o>
              ^superstate <ss>)
   (<o> ^name evaluate-operator)
   -->
   (<o> ^superstate <ss>)}


###
###      7.3.1.1 Evaluation Objects
###

sp {selection*elaborate*evaluation*value
   :default
   (state <s> ^evaluation <e>)
   (<e> ^ << numeric-value symbolic-value >>)
   -->
   (<e> ^value true)}

sp {selection*elaborate*evaluation*desired
   :default
   (state <s> ^superstate.desired <d>
              ^evaluation <e>)
   -->
   (<e> ^desired <d>)}



###
###      7.3.1.2 Applying the evaluate-operator operator
###
###   Domain specific code may directly implement an evaluation, or an operator no-change may occur
### to do the job, see the next section.




###
###      7.3.2   The evaluation subgoal
###

###
### These productions which fire once an evaluation subgoal has been created
### have also been generalized.


sp {evaluate-operator*elaborate*state*desired
   :default
   (state <s> ^impasse no-change
              ^attribute operator 
              ^superstate.operator <so>)
   (<so> -^default-desired-copy yes
          ^name evaluate-operator
          ^evaluation.desired <d>)
   -->
   (<s> ^desired <d>)}

sp {evaluate-operator*elaborate*state*name
   :default
   (state <s> ^impasse no-change
              ^attribute operator
              ^superstate.operator <so>)
   (<so> ^name evaluate-operator
         ^superstate.name <name>)
   -->
   (<s> ^name <name>)}

## install a copy of the state, when ^default-state-copying and there
## is an operator tie.

sp {evaluate-operator*elaborate*state*duplicate-of
   :default
   (state <s> ^superstate <ss>
              ^default-state-copy yes)
   (state <ss> ^operator <so>)
   (<so> ^name evaluate-operator
         ^superstate <sss>) 
   -->
   (<s> ^duplicate-of* <sss>)}

### Copy down operator

sp {evaluate-operator*elaborate*state*look-ahead-operator*copy
   :default
   (state <s> ^problem-space.name <n> 
          ^default-operator-copy yes 
              ^superstate.operator <so>)
   (<so> ^name evaluate-operator 
         ^superoperator <o> 
         ^superproblem-space.name <n>)
   -->
   (<s> ^look-ahead-operator <copy-o>)
   (<copy-o> ^duplicate-of* <o>)}   


## Create pointer for uniform access even in no copy

### Added test for superproblem-space.  This restricts these productions
### to only fire in a lookahead.  Previously, these productions made it
### impossible to use evaluation problem spaces other than lookahead.

sp {evaluate-operator*elaborate*state*look-ahead-operator*no-copy
   :default
   (state <s> ^problem-space.name <p> 
          ^default-operator-copy no 
              ^superstate.operator <so>)
   (<so> ^name evaluate-operator 
         ^superoperator <o> 
         ^superproblem-space.name <p>)
   -->
   (<s> ^look-ahead-operator <o>)}   

### install copy of operator in lookahead context.

sp {evaluate-operator*propose*look-ahead
   :default
   (state <s> ^look-ahead-operator <o>
             -^tried-tied-operator <o>)
   -->
   (<s> ^operator <o> +)}

sp {evaluate-operator*propose*look-ahead*reject-all-others
   :default
   (state <s> ^look-ahead-operator <o> 
              ^operator { <> <o> <o1> } +)
  -(<s> ^tried-tied-operator <o>)
   -->
   (<s> ^operator <o1> -)}

### Detect that the operator has been tried.

sp {evaluate-operator*elaborate*state*tried-tied-operator
   :default
   (state <s> ^operator <o> 
              ^look-ahead-operator <o>)
   -->
   (<s> ^tried-tied-operator <o>)}




### Give symbol-value failure when no operators are proposed in subgoals

sp {evaluate-operator*elaborate*evaluation*failure*no-operators
   :default
   (state <select-g> ^operator <o2>
                     ^evaluation <e2>)
   (<o2> ^name evaluate-operator
         ^evaluation <e2>)
   (state <eval-g> ^superstate <select-g>
                   ^quiescence t)
   (state <state-nc> ^superstate <eval-g>
                     ^attribute state
                     ^impasse no-change
                     ^quiescence t)
   (state <goal-nc> ^superstate <state-nc>
                    ^attribute state
                    ^impasse no-change
                    ^quiescence t)
   -->
   (<e2> ^symbolic-value failure)}

sp {evaluate-operator*elaborate*evaluation*failure*constraint-failure
   :default
   (state <select-g> ^operator <o2>)
   (<select-g> ^evaluation <e2>)
   (<o2> ^name evaluate-operator
         ^evaluation <e2>)
   (state <eval-g> ^superstate <select-g>)
   (state <rej-state-imp> ^superstate <eval-g>
                          ^attribute operator
                          ^impasse constraint-failure)
   -->
   (<e2> ^symbolic-value failure)}

sp {evaluate-operator*elaborate*symbolic-evaluation*from-subgoal
   :default
   (state <s> ^operator <so>
          ^evaluation <e>)
   (<so> ^name evaluate-operator
         ^evaluation <e>
         ^evaluation.desired <eb>)
   (state <ss> ^superstate <s>
          ^ { << required-success success partial-success 
               indifferent partial-failure failure prohibit-failure
               draw lose win >> <svalue> } <eb>)
   -->
   (<e> ^symbolic-value <svalue>)}


sp {evaluate-operator*elaborate*numeric-evaluation*from-subgoal
   :default
   (state <s> ^operator <so>
          ^evaluation <e>)
   (<so> ^name evaluate-operator
         ^evaluation <e>
         ^evaluation.desired <eb>)
   (state <ss> ^superstate <s>
          ^desired <eb>
          ^numeric-value <v>)
   -->
   (<e> ^numeric-value <v>)}


##                                Added to handle duplicated desireds
sp {evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired
   :default
   (state <s> ^superstate <ss>
              ^ { << required-success success partial-success 
                     indifferent partial-failure failure prohibit-failure
                     draw lose win >> <svalue> } <deb>)
   (state <ss> ^operator <so>
               ^evaluation <e>)
   (<so> ^name evaluate-operator
         ^evaluation <e>
         ^evaluation.desired <eb>)
   (<deb> ^duplicate-of* <eb>)
   -->
   (<e> ^symbolic-value <svalue>)}



###
###      7.3.2.1. State Copying
###

## Switch to look at current problem space, not super
## If no signals on problem space, the default is to copy both state and operator

sp {evaluate-operator*elaborate*default-for-default-state-copy-is-yes 
   :default
   (state <s> ^superstate.operator.name evaluate-operator
          ^problem-space <p>)
  -(<p> ^default-state-copy no)
   -->
   (<s> ^default-state-copy yes)}

sp {evaluate-operator*elaborate*default-state-copy-from-problem-space 
   :default
   (state <s> ^superstate.operator.name evaluate-operator
          ^problem-space.default-state-copy <yes-or-no>)
   -->
   (<s> ^default-state-copy <yes-or-no>)}

### Default is that all-attributes-at-level are copied

sp {evaluate-operator*elaborate*state*default-copy-is-all-attributes-at-level-one 
   :default
   (state <s> ^impasse no-change
              ^attribute operator
              ^superstate.operator.name evaluate-operator
          ^problem-space <p>)
   (<p> -^all-attributes-at-level two
        -^one-level-attributes
        -^two-level-attributes
        -^dont-copy
        -^dont-copy-anything)
   -->
   (<s> ^all-attributes-at-level one)}

sp {evaluate-operator*elaborate*state*default-copy-is-all-attributes-at-level-one*no-problem-space
   :default
   (state <s> ^impasse no-change
         -^problem-space
              ^attribute operator
              ^superstate.operator <so>)
   (<so> ^name evaluate-operator 
        -^superproblem-space <p>)
   -->
   (<s> ^all-attributes-at-level one)}

### We want ^all-attributes-at-level one to be on the goal, but if someone
### puts it on the space along with the other copying flags, we should allow
### that.  So, copy it from the space to the goal.

sp {evaluate-operator*elaborate*state*copy-all-attributes-at-level-one-from-problem-space 
   :default
   (state <s> ^problem-space.all-attributes-at-level one
              ^default-state-copy yes)
   -->
   (<s> ^all-attributes-at-level one)}

### Set up identifier mapping table for state duplication. 

sp {evaluate-operator*elaborate*state*create-duplicates-table 
   :default
   (state <s> ^impasse no-change
              ^attribute operator
          ^default-state-copy yes
              ^superstate.operator.name evaluate-operator)
   -->
   (<s> ^duplicates* <d>)}

### Copy one-level-attributes.

sp {evaluate-operator*elaborate*state*add-one-level-attributes 
   :default
   (state <s> ^problem-space.one-level-attributes <att>
              ^duplicate-of*.<att> <val>
              ^default-state-copy yes)  
   -->
   (<s> ^<att> <val>)}

## Copy all attributes, when ^all-attributes-at-level one.

sp {evaluate-operator*elaborate*state*add-all-attributes-at-level-one 
   :default
   (state <s> ^problem-space <p> 
              ^default-state-copy yes
              ^all-attributes-at-level one
              ^duplicate-of* <ss>)
   (<p> -^dont-copy-anything 
        -^dont-copy <att>)
   (<ss> ^{ <> duplicate-of* <> tried-tied-operator <> problem-space 
            <> impasse <> attribute <> choices <> quiescence 
            <> operator <> superstate <> type <> name <> look-ahead-operator 
            <att> } <val>)
   -->
   (<s> ^<att> <val>)}

### If we copied a one-level-attribute, and it later turned
### out that its value happened to be something that was pointed to by a
### two-level-attribute, change its value to be the copied object.

sp {evaluate-operator*elaborate*state*change-one-level-attribute-to-duplicate 
   :default
   (state <s> ^problem-space.one-level-attributes <att>
              ^duplicates*.<id> <new-id>
              ^default-state-copy yes
              ^duplicate-of*.<att> <id>)
   -->
   (<s> ^<att> <id> - 
        ^<att> <new-id>)}

### Fixes, when all-attributess-at-level one.

sp {evaluate-operator*elaborate*state*change-all-attributes-at-level-one-to-duplicate
   :default
   (state <s> -^problem-space.dont-copy <att>
              ^default-state-copy yes
              ^all-attributes-at-level one
              ^duplicates*.<id> <new-id>
              ^duplicate-of*.{ <> tried-tied-operator <att> } <id>)
   -->
   (<s> ^<att> <id> - 
        ^<att> <new-id>)}

### Create new ids for two-level-attributes.

sp {evaluate-operator*elaborate*state*duplicate-id-for-attribute 
   :default
   (state <s> ^problem-space.two-level-attributes <att>
              ^duplicates* <d>
              ^default-state-copy yes
              ^duplicate-of*.<att> <id>)
   -->
   (<d> ^<id> <new-id>)}

### Create new ids for all attributes, when ^all-attributes-at-level two.

sp {evaluate-operator*elaborate*state*duplicate-id-for-all-attributes 
   :default
   (state <s> ^problem-space <p>
              ^duplicates* <d>
              ^default-state-copy yes
              ^duplicate-of* <ss>)
   (<p> -^dont-copy-anything
        -^dont-copy <att>
         ^all-attributes-at-level two
        -^one-level-attributes <att>)
   (<ss> ^{ <> duplicate-of* <> tried-tied-operator <> problem-space 
            <> impasse <> attribute <> choices <> quiescence
            <> operator <> superstate 
            <att> } <id>)
   -->
   (<d> ^<id> <new-id>)}

### Create a copy of the old object on the new link.  First copy
### augmentations that don't point to objects that have been
### duplicated. 

#set warnings off
warnings --off
sp {evaluate-operator*elaborate*add-attribute-to-duplicate 
   :default
   (state <s> ^duplicates* <d> 
             -^problem-space.dont-copy <sub-att>
              ^default-state-copy yes)
   (<d> ^<id> <new-id>
      - ^<sub-val>)
   (<id> ^ { <> tried-tied-operator <sub-att> } <sub-val>)
   -->
   (<new-id> ^<sub-att> <sub-val>)}
#set warnings on
warnings --on

### Next copy augmentations that point to duplicated objects:

#set warnings off
warnings --off
sp {evaluate-operator*elaborate*add-duplicated-attribute-to-duplicate 
   :default
   (state <s> ^duplicates* <d>
              ^default-state-copy yes)
   (<d> ^<id> <new-id>
        ^<sub-val> <new-val>)
   (<id> ^ { <> tried-tied-operator <sub-att> } <sub-val>)
   -->
   (<new-id> ^<sub-att> <new-val>)}
# commented out by voigtjr
warnings --on

### Added ^two-level-attributes <att>.  Previously, it
### would copy any attribute that happened to point to the same value as
### one of the two-level-attributes.

sp {evaluate-operator*elaborate*state*add-duplicate-to-state 
   :default
   (state <s> ^problem-space.two-level-attributes <att>
              ^duplicates*.<id> <new-id>
              ^default-state-copy yes
              ^duplicate-of*.<att> <id>)
   -->
   (<s> ^<att> <new-id>)}


### moves the new links to the state when ^all-atts two.

sp {evaluate-operator*elaborate*state*add-duplicates-for-all-attributes 
   :default
   (state <s> ^problem-space <p>
              ^duplicates*.<id> <new-id>
              ^default-state-copy yes
              ^duplicate-of*.{ <> tried-tied-operator <att> } <id>)
   (<p> ^all-attributes-at-level two
      - ^dont-copy-anything
      - ^dont-copy <att>
      - ^one-level-attributes <att>)
   -->
   (<s> ^<att> <new-id>)}

## -------------------------------
## Desired copying:
## -------------------------------

## Copy attributes to the duplicate desired state.  We
## do this after the state is installed so that the duplicates table
## will already have been filled in.  We just copy all attributes over
## from the original operator, except that attributes that pointed to 
## objects that have been duplicated (on the state) are modified to point
## to the duplicate objects.

sp {evaluate-operator*elaborate*state*eval*desired 
   :default
   (state <s> ^superstate <ss>)
   (state <ss> ^operator <so>)
   (<so> ^name evaluate-operator
         ^evaluation.desired <d>
         ^default-desired-copy yes)
   -->
   (<s> ^desired <d-copy>)
   (<d-copy> ^duplicate-of* <d>)}   


## Copy attributes whose values haven't been duplicated.

### SBH/mvp 9-2-94
### Also, added the condition that the desired be attached to
### an evaluation superoperator.  This is because if we use the same 
### desired in a lower lookahead context, this production re-firing 
### can cause stupid chunks. 

sp {duplicate-desired*copy-old-value
   :default
   (state <s> ^superstate.operator <so>
          ^problem-space <p>
              ^duplicates* <d>
              ^desired <o-copy>)
   (<so> ^name evaluate-operator
         ^evaluation.desired <o>)
   (<o-copy> ^duplicate-of* <o>)
   (<o> ^{ <> duplicate-of* <att> } <val>)
 - (<p> ^dont-copy <att>)
 - (<d> ^<val>)
   -->
   (<o-copy> ^<att> <val>)}

## Copy attributes whose values have been duplicated.

sp {duplicate-desired*replace-old-value
   :default
   (state <s> ^duplicates*.<id> <copy-id>
          ^problem-space <p>
              ^desired <o-copy>)
   (<o-copy> ^duplicate-of* <o>)
   (<o> ^ { <> duplicate-of* <att> } <id>)
   (<p> - ^dont-copy <att>)
   -->
   (<o-copy> ^<att> <copy-id>)}


###      7.3.2.3 Operator copying   
###
### Copy attributes to the duplicate operator.  We
### do this after the state is installed so that the duplicates table
### will already have been filled in.  We just copy all attributes over
### from the original operator, except that attributes that pointed to 
### objects that have been duplicated (on the state) are modified to point
### to the duplicate objects.


sp {evaluate-operator*elaborate*operator*default-operator-copy-is-yes 
   :default
   (state <s> ^superstate.operator.name evaluate-operator
          ^problem-space <p>)
  -(<p> ^default-operator-copy no)
   -->
   (<s> ^default-operator-copy yes)}


sp {evaluate-operator*elaborate*operator*copy-default-operator-copy-from-problem-space 
   :default
   (state <s> ^superstate.operator.name evaluate-operator 
          ^problem-space.default-operator-copy <yes-or-no>)
   -->
   (<s> ^default-operator-copy <yes-or-no>)}

### Set up identifier mapping table for operator

sp {evaluate-operator*elaborate*state*create-duplicates-table-for-operator-only 
   :default
   (state <s> ^impasse no-change
              ^attribute operator
          ^default-operator-copy yes 
        - ^default-state-copy yes)
   -->
   (<s> ^duplicates* <d>)}

### Copy attributes whose values haven't been duplicated.
###

sp {evaluate-operator*elaborate*operator*add-attribute-to-duplicate-operator 
   :default
   (state <s> ^duplicates* <d>
          ^problem-space <p>
              ^look-ahead-operator <o-copy>)
   (<o-copy> ^duplicate-of* <o>)
   (<o> ^ { <> duplicate-of* <att> } <val>)
  (<p> - ^ dont-copy <att>)
   (<d> - ^<val>)
   -->
   (<o-copy> ^<att> <val>)}

### Copy attributes whose values have been duplicated.

sp {evaluate-operator*elaborate*operator*add-duplicated-attribute-to-duplicate-operator 
   :default
   (state <s> ^duplicates* <d>
          ^problem-space <p>
              ^look-ahead-operator <o-copy>)
   (<o-copy> ^duplicate-of* <o>)
   (<o> ^ { <> duplicate-of* <att> } <id>)
  (<p> - ^ dont-copy <att>)
   (<d> ^<id> <copy-id>)
   -->
   (<o-copy> ^<att> <copy-id>)}



###
###     7.3.3   Computing evaluations
###
###
###     7.3.3.1 Computing numeric evaluations
###
### This is domain specific, so there are no default productions for this.

###
###     7.3.3.2 Comparing numeric evaluations
###

### If two operators have equal evaluations they are indifferent.

sp {selection*compare*equal-evaluation-indifferent 
   :default
   (state <s> ^name selection 
              ^superstate <ss>
              ^evaluation <e1>  { <> <e1> <e2> })
   (<ss> ^desired <d>)
   (<e1> ^superoperator <x>
         ^numeric-value <v>
         ^desired <d>)
   (<e2> ^superoperator <y>
         ^numeric-value <v>
         ^desired <d>)
 - (<d> ^equal not-indifferent)
   -->
   (<ss> ^operator <x> = <y>)}   


###
### Generate operator preferences based on their evaluations and info 
### as to whether higher or lower evaluations are better.

sp {selection*compare*higher-evaluation-better 
   :default
   (state <s> ^name selection 
              ^superstate <ss>
              ^evaluation <e1>
              ^evaluation { <> <e1> <e2> })
   (state <ss> ^problem-space <p2>
               ^desired <d>)
   (<e1> ^superoperator <o1>
         ^numeric-value <v>
         ^desired <d>)
   (<e2> ^superoperator <o2>
         ^numeric-value < <v>
         ^desired <d>)
   (<d> ^better higher)
   -->
   (<ss> ^operator <o2> < <o1>)}

sp {selection*compare*prefer-lower-evaluation 
   :default
   (state <s> ^name selection
              ^superstate <ss>
              ^evaluation <e1>
              ^evaluation { <> <e1> <e2> })
   (state <ss> ^problem-space <p2>
               ^desired <d>)
   (<e1> ^superoperator <o1>
         ^numeric-value <v>
         ^desired <d>)
   (<e2> ^superoperator <o2>
         ^numeric-value > <v>
         ^desired <d>)
   (<d> ^better lower)
   -->
   (<ss> ^operator <o2> < <o1>)}  


###
###      7.3.3.3 Computing symbolic evaluations
###
### Create pick-best-numeric-evaluation operator in selection problem space.

# Propose after evaluations are done

sp {selection*compare*success-evaluation-better-than-partial-success*new
   :default
   (state <s> ^name selection 
              ^superstate <ss>
              ^evaluation <e1> { <> <e1> <e2> })  
-{(<s> ^operator <o> +)
    (<o> ^name evaluate-operator)}

   (state <ss> ^desired <d>)
   (<e1> ^superoperator <x> 
         ^symbolic-value partial-success 
         ^success-depth <n>
         ^desired <d>)
   (<e2> ^superoperator { <> <x> <y> } 
         ^symbolic-value partial-success 
         ^success-depth > <n>
         ^desired <d>)
   -->
   (<ss> ^operator <x> > <y>)}  

sp {selection*compare*success-evaluation-equal-than-partial-success*new
   :default
   (state <s> ^name selection 
              ^superstate <ss>
              ^evaluation <e1> { <> <e1> <e2> })
  -{(<s> ^operator <o> +)
    (<o> ^name evaluate-operator)}
   (state <ss> ^desired <d>)
   (<e1> ^superoperator <x> 
         ^symbolic-value partial-success 
         ^success-depth <n>
         ^desired <d>)
   (<e2> ^superoperator { <> <x> <y> } 
         ^symbolic-value partial-success 
         ^success-depth <n>
         ^desired <d>)
   -->
   (<ss> ^operator <x> = <y>)}




###
###      7.3.3.3 Computing symbolic evaluations
###


sp {selection*compare*same-symbolic-evaluations-are-indifferent*NEW
   :default
   (state <s> ^name selection 
              ^superstate <ss>
              ^evaluation <e1>  { <> <e1> <e2> })
   (state <ss> ^desired <d>)
   (<e1> ^superoperator <x> 
         ^symbolic-value { <> partial-success <v> }
         ^desired <d>)
   (<e2> ^superoperator <y> 
         ^symbolic-value { <> partial-success <v> }
         ^desired <d>)
   -->
   (<ss> ^operator <x> = <y>)}  

sp {selection*compare*success-evaluation-better-than-partial-success
   :default
   (state <s> ^name selection 
              ^superstate <ss>
              ^evaluation <e1> { <> <e1> <e2> })
   (state <ss> ^desired <d>)
   (<e1> ^superoperator <x> 
         ^symbolic-value success 
         ^desired <d>)
   (<e2> ^superoperator { <> <x> <y> } 
         ^symbolic-value partial-success 
         ^desired <d>)
   -->
   (<ss> ^operator <x> > <y>)}  

sp {selection*compare*partial-success-evaluation-better-than-failure*new
   :default
   (state <s> ^name selection 
              ^superstate <ss>
              ^evaluation <e1> { <> <e1> <e2> })
   (state <ss> ^desired <d>)
   (<e1> ^superoperator <x> 
         ^symbolic-value partial-success 
         ^desired <d>)
   (<e2> ^superoperator { <> <x> <y> } 
         ^symbolic-value << failure partial-failure >>
         ^desired <d>)
   -->
   (<ss> ^operator <x> > <y>)}  

sp {selection*compare*partial-failure-evaluation-better-than-failure
   :default
   (state <s> ^name selection 
              ^superstate <ss>
              ^evaluation <e1>  { <> <e1> <e2> })
   (state <ss> ^desired <d>)
   (<e1> ^superoperator <x> 
         ^symbolic-value partial-failure 
         ^desired <d>)
   (<e2> ^superoperator { <> <x> <y> } 
         ^symbolic-value failure 
         ^desired <d>)
   -->
   (<ss> ^operator <x> > <y>)}  

sp {selection*select*required-success-evaluation-becomes-required-preference
   :default
   (state <s> ^name selection 
              ^superstate <ss>
              ^evaluation <e1>)
   (state <ss> ^desired <eb>)
   (<e1> ^symbolic-value required-success
         ^desired <eb> 
         ^superoperator <o1>)
   -->
   (<ss> ^operator <o1> !)}

sp {selection*select*success-evaluation-becomes-best-preference
   :default
   (state <s> ^name selection 
              ^superstate <ss>
              ^evaluation <e1>)
   (state <ss> ^desired <eb>)
   (<e1> ^symbolic-value success 
         ^desired <eb> 
         ^superoperator <o1>)
   -->
   (<ss> ^operator <o1> >)}

sp {selection*select*indifferent-evaluation-becomes-indifferent-preference
   :default
   (state <s> ^name selection
              ^superstate <ss>
              ^evaluation <e1>)
   (state <ss> ^desired <eb>)
   (<e1> ^symbolic-value indifferent
         ^desired <eb> 
         ^superoperator <o1>)
   -->
   (<ss> ^operator <o1> =)}

sp {selection*select*partial-failure-evaluation-becomes-worst-preference
   :default
   (state <s> ^name selection
              ^superstate <ss>
              ^evaluation <e1>)
   (state <ss> ^desired <e>)
   (<e1> ^symbolic-value partial-failure
         ^desired <e>
         ^superoperator <o1>)
   -->
   (<ss> ^operator <o1> <)}

sp {selection*select*failure-evaluation-becomes-reject-preference
   :default
   (state <s> ^name selection
              ^superstate <ss>
              ^evaluation <e1>)
   (state <ss> ^desired <e>)
   (<e1> ^symbolic-value << lose failure >>
         ^desired <e>
         ^superoperator <o1>)
   -->
   (<ss> ^operator <o1> -)}

sp {selection*select*prohibit-failure-evaluation-becomes-prohibit-preference
   :default
   (state <s> ^name selection 
              ^superstate <ss>
              ^evaluation <e1>)
   (state <ss> ^desired <e>)
   (<e1> ^symbolic-value prohibit-failure
         ^desired <e>
         ^superoperator <o1>)
   -->
   (<ss> ^operator <o1> ~)}




###
###      7.3.3.4 Default evaluations
###

###         A. pass-back-success
## if an operator leads to success and it is being
## tried out in a subgoal to evaluate another operator -
## give that second operator a success evaluation also


###
###      7.3.3.5 Novalue evaluations
###

### Signal that there are still objects to evaluate.

sp {selection*elaborate*state*all-objects-evaluated
   :default
   (state <s> ^name selection
              ^operator <o> +)
- {(<o> ^name evaluate-operator
        ^evaluation.value true)}
   -->
   (<s> ^not-all-operators-evaluated true)}

### Signal that a value other than novalue has been assigned.

sp {selection*elaborate*state*found-value-true
   :default
   (state <s> ^name selection
              ^evaluation <e>)
   (<e> ^ << numeric-value symbolic-value >> <> novalue)
   -->
   (<s> ^found-value true)}

### If all operators have been evaluated, and all have value novalue, and
### there is a operator being evaluated in a higher context, assign that
### operator novalue.

sp {selection*elaborate*evaluate-operator*all-operators-novalue
   :default
   (state <s> ^superstate.superstate <sss>
              ^operator <o>
             -^not-all-operators-evaluated
             -^found-value
              ^quiescence t
              ^choices multiple)
   (state <sss> ^name selection
                ^operator <sso>)
   (<sso> ^name evaluate-operator
          ^evaluation <e>)
   -->
   (<e> ^numeric-value novalue)}

### Make novalue worse than any other value.

sp {selection*compare*novalue-evaluation-always-worse
   :default
   (state <s> ^name selection 
              ^superstate <ss>
              ^evaluation <e1>
              ^evaluation { <> <e1> <e2> })
   (state <ss> ^desired <d>)
   (<e1> ^superoperator <o1>
         ^numeric-value novalue
         ^desired <d>)
   (<e2> ^superoperator <o2>
         ^numeric-value <> novalue
         ^desired <d>)
   -->
   (<ss> ^operator <o2> > <o1>)} 



###
###        7.3.4   Halting Soar with success or failure
###

###         A. top-goal*halt*state*success
### Handle state augmentations dealing with goal termination for the top-level goal.

sp {top-goal*halt*success
   :default
   (state <s> ^name <name>
              ^desired <eb>
              ^superstate nil
              ^<< required-success success >> <eb>)
   -->
   (write (crlf)   <name>  | achieved |)
   (halt)}

###         B. top-goal*halt*state*failure

sp {top-goal*halt*failure
   :default
   (state <s> ^superstate nil
              ^desired <eb>
              ^name <name>
              ^ << prohibit-failure failure >> <eb>)
   -->
   (write (crlf)  <name>  | failed|)
   (halt)}

###
###      7.5     Execution monitoring
###

### If the state is marked with ^success <d>, the goal succeeds.

sp {monitor*goal*success
   :default
   (state <ts> ^superstate nil
              -^verbose false)
   (state <s> ^top-state <ts>
              ^name <gname>
              ^desired <d>
              ^<< partial-success required-success success >> <d>)
   -->
   (write (crlf) |  Goal | <gname> | succeeded. |)}

### If the state is marked with ^failure <d>, the goal fails.

sp {monitor*goal*failure
   :default
   (state <ts> ^superstate nil
              -^verbose false)
   (state <s> ^top-state <ts>
              ^name <gname>
              ^desired <d>
              ^<< partial-failure failure prohibit-failure >> <d>)
   -->
   (write (crlf) |  Goal | <gname> | failed. |)}

### Print the evaluation of any operator that has a name (which doesn't
### get states).

sp {monitor*operator*evaluation
   :default
   (state <ts> ^superstate nil
              -^verbose false)
   (state <s> ^top-state <ts>
              ^operator <o>)
   (<o> ^name evaluate-operator
        ^superoperator <obj>
        ^evaluation. << numeric-value symbolic-value >> <n>)
   (<obj> ^name <name>)
   -->
   (write (crlf) |  Evaluation of | <obj> | (| <name> |) is | <n>)}

############## Rules that force optimal solution

sp {evaluate-operator*elaborate*symbolic-depth*from-subgoal*new
   :default
   (state <s> ^operator <so>
          ^evaluation <e>)
   (<so> ^name evaluate-operator
         ^evaluation <e>
         ^evaluation.desired <eb>)
   (state <ss> ^superstate <s>
          ^success-depth <sd>)
   -->
   (<e> ^success-depth <sd>)}

sp {evaluation*operator*count-depth
   :default
   (state <s> ^operator <o> ^depth <d>)
   -->
   (<s> ^depth <d> -
               (+ 1 <d>))}

sp {selection*compute*success-evaluation-best-partial-success*new
   :default
   (state <s> ^name selection            
              ^superstate.superstate.operator.evaluation <se>
              ^evaluation <e1>)
  -{(<s> ^operator <o> +)
    (<o> ^name evaluate-operator)}
   (<e1> ^superoperator <x> 
         ^symbolic-value partial-success 
         ^success-depth <n>
         ^desired <d>)
-{(<s> ^evaluation <e2>)
  (<e2> ^symbolic-value partial-success 
        ^success-depth < <n>
        ^desired <d>)}
   -->
   (<se> ^success-depth (+ 1 <n> )
        ^symbolic-value partial-success)} 
 
sp {selection*compute*failure-evaluation-exceed-cutoff*new
   :default
   (state <task-g> ^depth <depth>
                   ^quiescence t
                   ^desired <d>
                   ^superstate <eval-s>)
   (<eval-s> ^evaluation.success-depth <= <depth>)
   -->
   (<task-g> ^partial-failure <d>)}

sp {selection*pass-back-success*depth*new    
   :default
   (state <s> ^superstate.superstate.operator <sso>
              ^evaluation.symbolic-value << required-success success >>
              ^success-depth <depth>)
   (<sso> ^name evaluate-operator 
          ^evaluation <e2> 
          ^superoperator.name)
   -->
   (<e2> ^symbolic-value partial-success
         ^success-depth (+ 1 <depth>))}
