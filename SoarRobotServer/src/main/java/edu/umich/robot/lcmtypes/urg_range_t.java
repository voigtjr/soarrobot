/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package edu.umich.robot.lcmtypes;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class urg_range_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int num_ranges;
    public float ranges[];
    public float rad0;
    public float radstep;
 
    public urg_range_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x06817120a88c4f95L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(urg_range_t.class))
            return 0L;
 
        classes.add(urg_range_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.num_ranges); 
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeFloat(this.ranges[a]); 
        }
 
        outs.writeFloat(this.rad0); 
 
        outs.writeFloat(this.radstep); 
 
    }
 
    public urg_range_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public urg_range_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static urg_range_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        urg_range_t o = new urg_range_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.num_ranges = ins.readInt();
 
        this.ranges = new float[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.ranges[a] = ins.readFloat();
        }
 
        this.rad0 = ins.readFloat();
 
        this.radstep = ins.readFloat();
 
    }
 
    public urg_range_t copy()
    {
        urg_range_t outobj = new urg_range_t();
        outobj.utime = this.utime;
 
        outobj.num_ranges = this.num_ranges;
 
        outobj.ranges = new float[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.ranges, 0, outobj.ranges, 0, this.num_ranges); 
        outobj.rad0 = this.rad0;
 
        outobj.radstep = this.radstep;
 
        return outobj;
    }
 
}

