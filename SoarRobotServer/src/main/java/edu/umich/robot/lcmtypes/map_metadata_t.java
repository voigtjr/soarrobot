/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package edu.umich.robot.lcmtypes;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class map_metadata_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int nareas;
    public double areas[][][];
    public int ngateways;
    public double gateways[][];
    public int nobjects;
    public byte object_types[];
    public short object_ids[];
    public double objects[][];
 
    public map_metadata_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xc22c306197ba155bL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(edu.umich.robot.lcmtypes.map_metadata_t.class))
            return 0L;
 
        classes.add(edu.umich.robot.lcmtypes.map_metadata_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.nareas); 
 
        for (int a = 0; a < this.nareas; a++) {
            for (int b = 0; b < 4; b++) {
                for (int c = 0; c < 2; c++) {
                    outs.writeDouble(this.areas[a][b][c]); 
                }
            }
        }
 
        outs.writeInt(this.ngateways); 
 
        for (int a = 0; a < this.ngateways; a++) {
            for (int b = 0; b < 2; b++) {
                outs.writeDouble(this.gateways[a][b]); 
            }
        }
 
        outs.writeInt(this.nobjects); 
 
        if (this.nobjects > 0)
            outs.write(this.object_types, 0, nobjects);
 
        for (int a = 0; a < this.nobjects; a++) {
            outs.writeShort(this.object_ids[a]); 
        }
 
        for (int a = 0; a < this.nobjects; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeDouble(this.objects[a][b]); 
            }
        }
 
    }
 
    public map_metadata_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public map_metadata_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static edu.umich.robot.lcmtypes.map_metadata_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        edu.umich.robot.lcmtypes.map_metadata_t o = new edu.umich.robot.lcmtypes.map_metadata_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.nareas = ins.readInt();
 
        this.areas = new double[(int) nareas][(int) 4][(int) 2];
        for (int a = 0; a < this.nareas; a++) {
            for (int b = 0; b < 4; b++) {
                for (int c = 0; c < 2; c++) {
                    this.areas[a][b][c] = ins.readDouble();
                }
            }
        }
 
        this.ngateways = ins.readInt();
 
        this.gateways = new double[(int) ngateways][(int) 2];
        for (int a = 0; a < this.ngateways; a++) {
            for (int b = 0; b < 2; b++) {
                this.gateways[a][b] = ins.readDouble();
            }
        }
 
        this.nobjects = ins.readInt();
 
        this.object_types = new byte[(int) nobjects];
        ins.readFully(this.object_types, 0, nobjects); 
        this.object_ids = new short[(int) nobjects];
        for (int a = 0; a < this.nobjects; a++) {
            this.object_ids[a] = ins.readShort();
        }
 
        this.objects = new double[(int) nobjects][(int) 3];
        for (int a = 0; a < this.nobjects; a++) {
            for (int b = 0; b < 3; b++) {
                this.objects[a][b] = ins.readDouble();
            }
        }
 
    }
 
    public edu.umich.robot.lcmtypes.map_metadata_t copy()
    {
        edu.umich.robot.lcmtypes.map_metadata_t outobj = new edu.umich.robot.lcmtypes.map_metadata_t();
        outobj.utime = this.utime;
 
        outobj.nareas = this.nareas;
 
        outobj.areas = new double[(int) nareas][(int) 4][(int) 2];
        for (int a = 0; a < this.nareas; a++) {
            for (int b = 0; b < 4; b++) {
                System.arraycopy(this.areas[a][b], 0, outobj.areas[a][b], 0, 2);            }
        }
 
        outobj.ngateways = this.ngateways;
 
        outobj.gateways = new double[(int) ngateways][(int) 2];
        for (int a = 0; a < this.ngateways; a++) {
            System.arraycopy(this.gateways[a], 0, outobj.gateways[a], 0, 2);        }
 
        outobj.nobjects = this.nobjects;
 
        outobj.object_types = new byte[(int) nobjects];
        if (this.nobjects > 0)
            System.arraycopy(this.object_types, 0, outobj.object_types, 0, this.nobjects); 
        outobj.object_ids = new short[(int) nobjects];
        if (this.nobjects > 0)
            System.arraycopy(this.object_ids, 0, outobj.object_ids, 0, this.nobjects); 
        outobj.objects = new double[(int) nobjects][(int) 3];
        for (int a = 0; a < this.nobjects; a++) {
            System.arraycopy(this.objects[a], 0, outobj.objects[a], 0, 3);        }
 
        return outobj;
    }
 
}

