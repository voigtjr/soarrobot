/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package edu.umich.robot.lcmtypes;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class sim_obstacles_t implements lcm.lcm.LCMEncodable
{
    public int generation;
    public int nrects;
    public double rects[][];
    public int ncircles;
    public double circles[][];
 
    public sim_obstacles_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xab64bbd211bb7ee3L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(sim_obstacles_t.class))
            return 0L;
 
        classes.add(sim_obstacles_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.generation); 
 
        outs.writeInt(this.nrects); 
 
        for (int a = 0; a < this.nrects; a++) {
            for (int b = 0; b < 5; b++) {
                outs.writeDouble(this.rects[a][b]); 
            }
        }
 
        outs.writeInt(this.ncircles); 
 
        for (int a = 0; a < this.ncircles; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeDouble(this.circles[a][b]); 
            }
        }
 
    }
 
    public sim_obstacles_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public sim_obstacles_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static sim_obstacles_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        sim_obstacles_t o = new sim_obstacles_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.generation = ins.readInt();
 
        this.nrects = ins.readInt();
 
        this.rects = new double[(int) nrects][(int) 5];
        for (int a = 0; a < this.nrects; a++) {
            for (int b = 0; b < 5; b++) {
                this.rects[a][b] = ins.readDouble();
            }
        }
 
        this.ncircles = ins.readInt();
 
        this.circles = new double[(int) ncircles][(int) 3];
        for (int a = 0; a < this.ncircles; a++) {
            for (int b = 0; b < 3; b++) {
                this.circles[a][b] = ins.readDouble();
            }
        }
 
    }
 
    public sim_obstacles_t copy()
    {
        sim_obstacles_t outobj = new sim_obstacles_t();
        outobj.generation = this.generation;
 
        outobj.nrects = this.nrects;
 
        outobj.rects = new double[(int) nrects][(int) 5];
        for (int a = 0; a < this.nrects; a++) {
            System.arraycopy(this.rects[a], 0, outobj.rects[a], 0, 5);        }
 
        outobj.ncircles = this.ncircles;
 
        outobj.circles = new double[(int) ncircles][(int) 3];
        for (int a = 0; a < this.ncircles; a++) {
            System.arraycopy(this.circles[a], 0, outobj.circles[a], 0, 3);        }
 
        return outobj;
    }
 
}

